// Date: 3/2/2019 3:31:28 PM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX

package com.shrub.model;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;

public class ModelComputerModern extends ModelBase
{
  //fields
    ModelRenderer frameLeft;
    ModelRenderer frameRight;
    ModelRenderer frameTop;
    ModelRenderer frameBottom;
    ModelRenderer screenOn;
    ModelRenderer back;
    ModelRenderer stand;
    ModelRenderer base;
    ModelRenderer prop;
    ModelRenderer screenOff;
    ModelRenderer controlChipProp;
  
  public ModelComputerModern()
  {
    textureWidth = 64;
    textureHeight = 32;
    
      frameLeft = new ModelRenderer(this, 24, 11);
      frameLeft.addBox(1F, 0F, 0F, 1, 10, 1);
      frameLeft.setRotationPoint(-8F, 12F, -4F);
      frameLeft.setTextureSize(64, 32);
      frameLeft.mirror = true;
      setRotation(frameLeft, 0F, 0F, 0F);
      frameRight = new ModelRenderer(this, 26, 0);
      frameRight.addBox(0F, 0F, 0F, 1, 10, 1);
      frameRight.setRotationPoint(6F, 12F, -4F);
      frameRight.setTextureSize(64, 32);
      frameRight.mirror = true;
      setRotation(frameRight, 0F, 0F, 0F);
      frameTop = new ModelRenderer(this, 0, 9);
      frameTop.addBox(0F, 0F, 0F, 12, 1, 1);
      frameTop.setRotationPoint(-6F, 12F, -4F);
      frameTop.setTextureSize(64, 32);
      frameTop.mirror = true;
      setRotation(frameTop, 0F, 0F, 0F);
      frameBottom = new ModelRenderer(this, 0, 27);
      frameBottom.addBox(-6F, 0F, -4F, 12, 1, 1);
      frameBottom.setRotationPoint(0F, 21F, 0F);
      frameBottom.setTextureSize(64, 32);
      frameBottom.mirror = true;
      setRotation(frameBottom, 0F, 0F, 0F);
      screenOn = new ModelRenderer(this, 0, 11);
      screenOn.addBox(0F, 0F, 0F, 12, 8, 0);
      screenOn.setRotationPoint(-6F, 13F, -3.5F);
      screenOn.setTextureSize(64, 32);
      screenOn.mirror = true;
      setRotation(screenOn, 0F, 0F, 0F);
      back = new ModelRenderer(this, 0, 0);
      back.addBox(0F, 0F, 0F, 12, 8, 1);
      back.setRotationPoint(-6F, 13F, -3F);
      back.setTextureSize(64, 32);
      back.mirror = true;
      setRotation(back, 0F, 0F, 0F);
      stand = new ModelRenderer(this, 30, 0);
      stand.addBox(0F, 0F, 0F, 4, 7, 1);
      stand.setRotationPoint(-2F, 17F, -2F);
      stand.setTextureSize(64, 32);
      stand.mirror = true;
      setRotation(stand, 0F, 0F, 0F);
      base = new ModelRenderer(this, 40, 0);
      base.addBox(0F, 0F, 0F, 6, 1, 3);
      base.setRotationPoint(-3F, 23.5F, -3F);
      base.setTextureSize(64, 32);
      base.mirror = true;
      setRotation(base, 0F, 0F, 0F);
      prop = new ModelRenderer(this, 40, 4);
      prop.addBox(-5F, 0F, 3F, 5, 1, 4);
      prop.setRotationPoint(-1F, 23F, 0F);
      prop.setTextureSize(64, 32);
      prop.mirror = true;
      setRotation(prop, 0F, 0F, 0F);
      screenOff = new ModelRenderer(this, 0, 19);
      screenOff.addBox(0F, 0F, 0F, 12, 8, 0);
      screenOff.setRotationPoint(-6F, 13F, -3.5F);
      screenOff.setTextureSize(64, 32);
      screenOff.mirror = true;
      setRotation(screenOff, 0F, 0F, 0F);
      controlChipProp = new ModelRenderer(this, 24, 18);
      controlChipProp.addBox(0F, 0F, -3F, 3, 1, 4);
      controlChipProp.setRotationPoint(4F, 23.5F, -3F);
      controlChipProp.setTextureSize(64, 32);
      controlChipProp.mirror = true;
      setRotation(controlChipProp, 0F, 0F, 0F);
  }
  
  public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
  {
    super.render(entity, f, f1, f2, f3, f4, f5);
    setRotationAngles(f, f1, f2, f3, f4, f5, entity);
    frameLeft.render(f5);
    frameRight.render(f5);
    frameTop.render(f5);
    frameBottom.render(f5);
    screenOn.render(f5);
    back.render(f5);
    stand.render(f5);
    base.render(f5);
    prop.render(f5);
    screenOff.render(f5);
    controlChipProp.render(f5);
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, Entity entity)
  {
    super.setRotationAngles(f, f1, f2, f3, f4, f5, entity);
  }
  
  public void renderModel(float f, boolean on, boolean computerIsReal, boolean circuitInstalled) {
	    frameLeft.render(f);
	    frameRight.render(f);
	    frameTop.render(f);
	    frameBottom.render(f);
	    if (on) {
	    	screenOn.render(f);
	    } else {
		    screenOff.render(f);
	    }
	    back.render(f);
	    stand.render(f);
	    base.render(f);
	    if (computerIsReal) {
	    	prop.render(f);
	    	 if (circuitInstalled) {
	 	    	controlChipProp.render(f);
	 	    }
	    }
  }

}
